# Пример: Reactor Echo (Кроссплатформенный TCP сервер)

Автор: momentics <momentics@gmail.com>

---

## Общая информация

Этот пример демонстрирует работу кроссплатформенного TCP-сервера эхо-сообщений на базе `reactor`-модуля проекта `hioload-ws`. Сервер использует низкоуровневый event loop (`epoll` для Linux, `IOCP` для Windows) для масштабируемого и эффективного асинхронного взаимодействия с сетевыми соединениями.

Пример реализует простой протокол эхо-ответа и может служить тестом производительности и жизненного цикла event reactor.

---

## Особенности

- Поддержка Linux и Windows
- Нативная поллинговая модель:
  - `epoll_create1` и `epoll_wait` под Linux
  - `CreateIoCompletionPort` и `GetQueuedCompletionStatus` под Windows
- Без дополнительных зависимостей — только стандартная библиотека Go
- Абстрактный интерфейс `Reactor` с реализациями под ОС
- Именованные колбэки, изолированные от аварий (panic)
- Разделение I/O-операций по платформам
- Подробный лог работы в консоль

---

## Структура

### `main.go`

- Инициализация TCP-сервера на порту `9002`
- Регистрация соединений в reactor через `Register(fd, EventRead, callback)`
- Реакция на события чтения
- Перехват, лог и отправка обратно принятых данных
- Закрытие обработчиков по завершении работы

### `socket_windows.go`

- Вариант для Windows
- Использует `syscall.Read`, `Write`, `Closesocket`
- Специфика Winsock/Windows API учтена

### `socket_unix.go`

- Вариант для Linux/macOS
- Использует классические POSIX-вызовы `Read`, `Write`, `Close` через `syscall`

---

## Как запустить

Перейдите в корень проекта:

### Linux:

```

go run ./examples/reactor_echo/

```

### Windows:

```

go run .\examples\reactor_echo\

```

‼️ Не используйте: `go run main.go`, так как Go не подключит файлы `socket_*.go`.

---

## Пример вывода

```

[reactor-echo] Listening on :9002 ...
[reactor-echo] Reactor initialized
[reactor-echo] Accepted connection from 127.0.0.1:55177
[reactor-echo] Received (11 bytes): Привет мир!
[reactor-echo] Sent (11 bytes) back to client
[reactor-echo] Connection closed by peer (fd=9)

```

---

## Тестирование

Вы можете использовать:

### Netcat (Linux):

```

nc 127.0.0.1 9002

```

### PowerShell (Windows):

```

\$client = New-Object System.Net.Sockets.TcpClient('localhost', 9002)
\$stream = \$client.GetStream()
\$writer = New-Object IO.StreamWriter \$stream
\$reader = New-Object IO.StreamReader \$stream
\$writer.WriteLine("тест")
\$writer.Flush()
\$response = \$reader.ReadLine()
\$response

```

---

## Преимущества архитектуры

- Асинхронный ввод/вывод на нативных механизмах ОС
- Работа с сырьем: дескрипторами/хэндлами
- Устойчивость к panic в user callback
- Никаких лишних горутин на соединение
- Полностью управляемый цикл poll → callback → IO → repeat
- Возможность расширения для zero-copy, batching, NUMA-aware логики

---

## Состав

| Файл                 | Назначение                                  |
|----------------------|----------------------------------------------|
| `main.go`            | TCP echo-сервер с reactor-обработкой         |
| `socket_unix.go`     | Обработка системных вызовов на Linux/macOS   |
| `socket_windows.go`  | Обработка вызовов сокетов Windows            |
| `README.md`          | Документация на английском языке             |
| `README_RU.md`       | Русская версия документации                  |

---

## Требования

- Go 1.21 или выше
- Поддержка платформы: Linux (6.0+), Windows 10+/Server 2016+
- IPv4 доступ, порт 9002 открыт
- Без необходимости в сторонних зависимостях (pure Go)

---

## Лицензия

MIT License © 2025 — momentics <momentics@gmail.com>
