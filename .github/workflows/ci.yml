# File: .github/workflows/ci.yml
# Name: hioload-ws CI/CD
# This full CI pipeline now enables Cgo in the lint job so that Cgo-based files
# (e.g., affinity_linux.go) compile and type-check correctly under golangci-lint.
#
# Author: momentics <momentics@gmail.com>
# License: Apache-2.0

name: hioload-ws CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
  release:
    types: [published]

env:
  GO_VERSION: "1.23"
  GOEXPERIMENT: aliastypeparams
  CGO_ENABLED: "1"
  MODULE_PATH: github.com/momentics/hioload-ws

jobs:
  lint:
    name: Lint & Static Analysis
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: ${{ env.CGO_ENABLED }}
    steps:
      - uses: actions/checkout@v4

      - name: Install libnuma-dev
        run: sudo apt-get update && sudo apt-get install -y libnuma-dev

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v5
        with:
          version: v1.59
          args: --timeout 5m
        env:
          GOEXPERIMENT: ${{ env.GOEXPERIMENT }}
          CGO_ENABLED: ${{ env.CGO_ENABLED }}

  test:
    needs: lint
    runs-on: ubuntu-latest
    env:
      GOEXPERIMENT: aliastypeparams
      CGO_ENABLED: "1"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ${{ env.GOMODCACHE }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Run tests (race, coverage)
        run: |
          CGO_ENABLED=1 go test -race -covermode=atomic -coverprofile=coverage.out ./...
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    env:
      GOEXPERIMENT: aliastypeparams
      CGO_ENABLED: "1"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
        run: |
          mkdir -p dist
          CGO_ENABLED=1 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags "-s -w" -o dist/hioload-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} ./cmd/hioload
      - uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*

  release:
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    env:
      GOEXPERIMENT: aliastypeparams
      CGO_ENABLED: "1"
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          path: dist
          merge-multiple: true
      - name: Attach binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          file: dist/*
          file_glob: true
      - name: Force pkg.go.dev index refresh
        run: |
          curl -sSf https://proxy.golang.org/${{ env.MODULE_PATH }}/@v/${{ github.ref_name }}.info \
          || echo "pkg.go.dev refresh failed but not fatal"
